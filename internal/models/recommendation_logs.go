// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// RecommendationLog is an object representing the database table.
type RecommendationLog struct {
	ID                  string             `boil:"id" json:"id" toml:"id" yaml:"id"`
	CustomerID          string             `boil:"customer_id" json:"customer_id" toml:"customer_id" yaml:"customer_id"`
	SessionID           null.String        `boil:"session_id" json:"session_id,omitempty" toml:"session_id" yaml:"session_id,omitempty"`
	RecommendationType  string             `boil:"recommendation_type" json:"recommendation_type" toml:"recommendation_type" yaml:"recommendation_type"`
	ContextType         null.String        `boil:"context_type" json:"context_type,omitempty" toml:"context_type" yaml:"context_type,omitempty"`
	RecommendedProducts types.StringArray  `boil:"recommended_products" json:"recommended_products,omitempty" toml:"recommended_products" yaml:"recommended_products,omitempty"`
	ClickedProducts     types.StringArray  `boil:"clicked_products" json:"clicked_products,omitempty" toml:"clicked_products" yaml:"clicked_products,omitempty"`
	PurchasedProducts   types.StringArray  `boil:"purchased_products" json:"purchased_products,omitempty" toml:"purchased_products" yaml:"purchased_products,omitempty"`
	AlgorithmVersion    null.String        `boil:"algorithm_version" json:"algorithm_version,omitempty" toml:"algorithm_version" yaml:"algorithm_version,omitempty"`
	ConfidenceScores    types.DecimalArray `boil:"confidence_scores" json:"confidence_scores,omitempty" toml:"confidence_scores" yaml:"confidence_scores,omitempty"`
	CreatedAt           null.Time          `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *recommendationLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recommendationLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecommendationLogColumns = struct {
	ID                  string
	CustomerID          string
	SessionID           string
	RecommendationType  string
	ContextType         string
	RecommendedProducts string
	ClickedProducts     string
	PurchasedProducts   string
	AlgorithmVersion    string
	ConfidenceScores    string
	CreatedAt           string
}{
	ID:                  "id",
	CustomerID:          "customer_id",
	SessionID:           "session_id",
	RecommendationType:  "recommendation_type",
	ContextType:         "context_type",
	RecommendedProducts: "recommended_products",
	ClickedProducts:     "clicked_products",
	PurchasedProducts:   "purchased_products",
	AlgorithmVersion:    "algorithm_version",
	ConfidenceScores:    "confidence_scores",
	CreatedAt:           "created_at",
}

var RecommendationLogTableColumns = struct {
	ID                  string
	CustomerID          string
	SessionID           string
	RecommendationType  string
	ContextType         string
	RecommendedProducts string
	ClickedProducts     string
	PurchasedProducts   string
	AlgorithmVersion    string
	ConfidenceScores    string
	CreatedAt           string
}{
	ID:                  "recommendation_logs.id",
	CustomerID:          "recommendation_logs.customer_id",
	SessionID:           "recommendation_logs.session_id",
	RecommendationType:  "recommendation_logs.recommendation_type",
	ContextType:         "recommendation_logs.context_type",
	RecommendedProducts: "recommendation_logs.recommended_products",
	ClickedProducts:     "recommendation_logs.clicked_products",
	PurchasedProducts:   "recommendation_logs.purchased_products",
	AlgorithmVersion:    "recommendation_logs.algorithm_version",
	ConfidenceScores:    "recommendation_logs.confidence_scores",
	CreatedAt:           "recommendation_logs.created_at",
}

// Generated where

type whereHelpertypes_DecimalArray struct{ field string }

func (w whereHelpertypes_DecimalArray) EQ(x types.DecimalArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_DecimalArray) NEQ(x types.DecimalArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_DecimalArray) LT(x types.DecimalArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_DecimalArray) LTE(x types.DecimalArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_DecimalArray) GT(x types.DecimalArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_DecimalArray) GTE(x types.DecimalArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_DecimalArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_DecimalArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var RecommendationLogWhere = struct {
	ID                  whereHelperstring
	CustomerID          whereHelperstring
	SessionID           whereHelpernull_String
	RecommendationType  whereHelperstring
	ContextType         whereHelpernull_String
	RecommendedProducts whereHelpertypes_StringArray
	ClickedProducts     whereHelpertypes_StringArray
	PurchasedProducts   whereHelpertypes_StringArray
	AlgorithmVersion    whereHelpernull_String
	ConfidenceScores    whereHelpertypes_DecimalArray
	CreatedAt           whereHelpernull_Time
}{
	ID:                  whereHelperstring{field: "\"recommendation_logs\".\"id\""},
	CustomerID:          whereHelperstring{field: "\"recommendation_logs\".\"customer_id\""},
	SessionID:           whereHelpernull_String{field: "\"recommendation_logs\".\"session_id\""},
	RecommendationType:  whereHelperstring{field: "\"recommendation_logs\".\"recommendation_type\""},
	ContextType:         whereHelpernull_String{field: "\"recommendation_logs\".\"context_type\""},
	RecommendedProducts: whereHelpertypes_StringArray{field: "\"recommendation_logs\".\"recommended_products\""},
	ClickedProducts:     whereHelpertypes_StringArray{field: "\"recommendation_logs\".\"clicked_products\""},
	PurchasedProducts:   whereHelpertypes_StringArray{field: "\"recommendation_logs\".\"purchased_products\""},
	AlgorithmVersion:    whereHelpernull_String{field: "\"recommendation_logs\".\"algorithm_version\""},
	ConfidenceScores:    whereHelpertypes_DecimalArray{field: "\"recommendation_logs\".\"confidence_scores\""},
	CreatedAt:           whereHelpernull_Time{field: "\"recommendation_logs\".\"created_at\""},
}

// RecommendationLogRels is where relationship names are stored.
var RecommendationLogRels = struct {
	Customer string
}{
	Customer: "Customer",
}

// recommendationLogR is where relationships are stored.
type recommendationLogR struct {
	Customer *Customer `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
}

// NewStruct creates a new relationship struct
func (*recommendationLogR) NewStruct() *recommendationLogR {
	return &recommendationLogR{}
}

func (o *RecommendationLog) GetCustomer() *Customer {
	if o == nil {
		return nil
	}

	return o.R.GetCustomer()
}

func (r *recommendationLogR) GetCustomer() *Customer {
	if r == nil {
		return nil
	}

	return r.Customer
}

// recommendationLogL is where Load methods for each relationship are stored.
type recommendationLogL struct{}

var (
	recommendationLogAllColumns            = []string{"id", "customer_id", "session_id", "recommendation_type", "context_type", "recommended_products", "clicked_products", "purchased_products", "algorithm_version", "confidence_scores", "created_at"}
	recommendationLogColumnsWithoutDefault = []string{"customer_id", "recommendation_type"}
	recommendationLogColumnsWithDefault    = []string{"id", "session_id", "context_type", "recommended_products", "clicked_products", "purchased_products", "algorithm_version", "confidence_scores", "created_at"}
	recommendationLogPrimaryKeyColumns     = []string{"id"}
	recommendationLogGeneratedColumns      = []string{}
)

type (
	// RecommendationLogSlice is an alias for a slice of pointers to RecommendationLog.
	// This should almost always be used instead of []RecommendationLog.
	RecommendationLogSlice []*RecommendationLog
	// RecommendationLogHook is the signature for custom RecommendationLog hook methods
	RecommendationLogHook func(context.Context, boil.ContextExecutor, *RecommendationLog) error

	recommendationLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recommendationLogType                 = reflect.TypeOf(&RecommendationLog{})
	recommendationLogMapping              = queries.MakeStructMapping(recommendationLogType)
	recommendationLogPrimaryKeyMapping, _ = queries.BindMapping(recommendationLogType, recommendationLogMapping, recommendationLogPrimaryKeyColumns)
	recommendationLogInsertCacheMut       sync.RWMutex
	recommendationLogInsertCache          = make(map[string]insertCache)
	recommendationLogUpdateCacheMut       sync.RWMutex
	recommendationLogUpdateCache          = make(map[string]updateCache)
	recommendationLogUpsertCacheMut       sync.RWMutex
	recommendationLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recommendationLogAfterSelectMu sync.Mutex
var recommendationLogAfterSelectHooks []RecommendationLogHook

var recommendationLogBeforeInsertMu sync.Mutex
var recommendationLogBeforeInsertHooks []RecommendationLogHook
var recommendationLogAfterInsertMu sync.Mutex
var recommendationLogAfterInsertHooks []RecommendationLogHook

var recommendationLogBeforeUpdateMu sync.Mutex
var recommendationLogBeforeUpdateHooks []RecommendationLogHook
var recommendationLogAfterUpdateMu sync.Mutex
var recommendationLogAfterUpdateHooks []RecommendationLogHook

var recommendationLogBeforeDeleteMu sync.Mutex
var recommendationLogBeforeDeleteHooks []RecommendationLogHook
var recommendationLogAfterDeleteMu sync.Mutex
var recommendationLogAfterDeleteHooks []RecommendationLogHook

var recommendationLogBeforeUpsertMu sync.Mutex
var recommendationLogBeforeUpsertHooks []RecommendationLogHook
var recommendationLogAfterUpsertMu sync.Mutex
var recommendationLogAfterUpsertHooks []RecommendationLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecommendationLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecommendationLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecommendationLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecommendationLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecommendationLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecommendationLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecommendationLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecommendationLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecommendationLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecommendationLogHook registers your hook function for all future operations.
func AddRecommendationLogHook(hookPoint boil.HookPoint, recommendationLogHook RecommendationLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recommendationLogAfterSelectMu.Lock()
		recommendationLogAfterSelectHooks = append(recommendationLogAfterSelectHooks, recommendationLogHook)
		recommendationLogAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		recommendationLogBeforeInsertMu.Lock()
		recommendationLogBeforeInsertHooks = append(recommendationLogBeforeInsertHooks, recommendationLogHook)
		recommendationLogBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		recommendationLogAfterInsertMu.Lock()
		recommendationLogAfterInsertHooks = append(recommendationLogAfterInsertHooks, recommendationLogHook)
		recommendationLogAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		recommendationLogBeforeUpdateMu.Lock()
		recommendationLogBeforeUpdateHooks = append(recommendationLogBeforeUpdateHooks, recommendationLogHook)
		recommendationLogBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		recommendationLogAfterUpdateMu.Lock()
		recommendationLogAfterUpdateHooks = append(recommendationLogAfterUpdateHooks, recommendationLogHook)
		recommendationLogAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		recommendationLogBeforeDeleteMu.Lock()
		recommendationLogBeforeDeleteHooks = append(recommendationLogBeforeDeleteHooks, recommendationLogHook)
		recommendationLogBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		recommendationLogAfterDeleteMu.Lock()
		recommendationLogAfterDeleteHooks = append(recommendationLogAfterDeleteHooks, recommendationLogHook)
		recommendationLogAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		recommendationLogBeforeUpsertMu.Lock()
		recommendationLogBeforeUpsertHooks = append(recommendationLogBeforeUpsertHooks, recommendationLogHook)
		recommendationLogBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		recommendationLogAfterUpsertMu.Lock()
		recommendationLogAfterUpsertHooks = append(recommendationLogAfterUpsertHooks, recommendationLogHook)
		recommendationLogAfterUpsertMu.Unlock()
	}
}

// One returns a single recommendationLog record from the query.
func (q recommendationLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecommendationLog, error) {
	o := &RecommendationLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recommendation_logs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RecommendationLog records from the query.
func (q recommendationLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecommendationLogSlice, error) {
	var o []*RecommendationLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RecommendationLog slice")
	}

	if len(recommendationLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RecommendationLog records in the query.
func (q recommendationLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recommendation_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recommendationLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recommendation_logs exists")
	}

	return count > 0, nil
}

// Customer pointed to by the foreign key.
func (o *RecommendationLog) Customer(mods ...qm.QueryMod) customerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CustomerID),
	}

	queryMods = append(queryMods, mods...)

	return Customers(queryMods...)
}

// LoadCustomer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recommendationLogL) LoadCustomer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecommendationLog interface{}, mods queries.Applicator) error {
	var slice []*RecommendationLog
	var object *RecommendationLog

	if singular {
		var ok bool
		object, ok = maybeRecommendationLog.(*RecommendationLog)
		if !ok {
			object = new(RecommendationLog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecommendationLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecommendationLog))
			}
		}
	} else {
		s, ok := maybeRecommendationLog.(*[]*RecommendationLog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecommendationLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecommendationLog))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &recommendationLogR{}
		}
		args[object.CustomerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recommendationLogR{}
			}

			args[obj.CustomerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`customers`),
		qm.WhereIn(`customers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Customer")
	}

	var resultSlice []*Customer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Customer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for customers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customers")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Customer = foreign
		if foreign.R == nil {
			foreign.R = &customerR{}
		}
		foreign.R.RecommendationLogs = append(foreign.R.RecommendationLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CustomerID == foreign.ID {
				local.R.Customer = foreign
				if foreign.R == nil {
					foreign.R = &customerR{}
				}
				foreign.R.RecommendationLogs = append(foreign.R.RecommendationLogs, local)
				break
			}
		}
	}

	return nil
}

// SetCustomer of the recommendationLog to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.RecommendationLogs.
func (o *RecommendationLog) SetCustomer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Customer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recommendation_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"customer_id"}),
		strmangle.WhereClause("\"", "\"", 2, recommendationLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CustomerID = related.ID
	if o.R == nil {
		o.R = &recommendationLogR{
			Customer: related,
		}
	} else {
		o.R.Customer = related
	}

	if related.R == nil {
		related.R = &customerR{
			RecommendationLogs: RecommendationLogSlice{o},
		}
	} else {
		related.R.RecommendationLogs = append(related.R.RecommendationLogs, o)
	}

	return nil
}

// RecommendationLogs retrieves all the records using an executor.
func RecommendationLogs(mods ...qm.QueryMod) recommendationLogQuery {
	mods = append(mods, qm.From("\"recommendation_logs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"recommendation_logs\".*"})
	}

	return recommendationLogQuery{q}
}

// FindRecommendationLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecommendationLog(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RecommendationLog, error) {
	recommendationLogObj := &RecommendationLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recommendation_logs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recommendationLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recommendation_logs")
	}

	if err = recommendationLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recommendationLogObj, err
	}

	return recommendationLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecommendationLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recommendation_logs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recommendationLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recommendationLogInsertCacheMut.RLock()
	cache, cached := recommendationLogInsertCache[key]
	recommendationLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recommendationLogAllColumns,
			recommendationLogColumnsWithDefault,
			recommendationLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recommendationLogType, recommendationLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recommendationLogType, recommendationLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recommendation_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recommendation_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recommendation_logs")
	}

	if !cached {
		recommendationLogInsertCacheMut.Lock()
		recommendationLogInsertCache[key] = cache
		recommendationLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RecommendationLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecommendationLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recommendationLogUpdateCacheMut.RLock()
	cache, cached := recommendationLogUpdateCache[key]
	recommendationLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recommendationLogAllColumns,
			recommendationLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recommendation_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recommendation_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recommendationLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recommendationLogType, recommendationLogMapping, append(wl, recommendationLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recommendation_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recommendation_logs")
	}

	if !cached {
		recommendationLogUpdateCacheMut.Lock()
		recommendationLogUpdateCache[key] = cache
		recommendationLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recommendationLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recommendation_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recommendation_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecommendationLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recommendationLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recommendation_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recommendationLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recommendationLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recommendationLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecommendationLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no recommendation_logs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recommendationLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recommendationLogUpsertCacheMut.RLock()
	cache, cached := recommendationLogUpsertCache[key]
	recommendationLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			recommendationLogAllColumns,
			recommendationLogColumnsWithDefault,
			recommendationLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			recommendationLogAllColumns,
			recommendationLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recommendation_logs, could not build update column list")
		}

		ret := strmangle.SetComplement(recommendationLogAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(recommendationLogPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert recommendation_logs, could not build conflict column list")
			}

			conflict = make([]string, len(recommendationLogPrimaryKeyColumns))
			copy(conflict, recommendationLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recommendation_logs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(recommendationLogType, recommendationLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recommendationLogType, recommendationLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recommendation_logs")
	}

	if !cached {
		recommendationLogUpsertCacheMut.Lock()
		recommendationLogUpsertCache[key] = cache
		recommendationLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RecommendationLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecommendationLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RecommendationLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recommendationLogPrimaryKeyMapping)
	sql := "DELETE FROM \"recommendation_logs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recommendation_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recommendation_logs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recommendationLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recommendationLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recommendation_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recommendation_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecommendationLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recommendationLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recommendationLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recommendation_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recommendationLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recommendationLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recommendation_logs")
	}

	if len(recommendationLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecommendationLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecommendationLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecommendationLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecommendationLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recommendationLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recommendation_logs\".* FROM \"recommendation_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recommendationLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecommendationLogSlice")
	}

	*o = slice

	return nil
}

// RecommendationLogExists checks if the RecommendationLog row exists.
func RecommendationLogExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recommendation_logs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recommendation_logs exists")
	}

	return exists, nil
}

// Exists checks if the RecommendationLog row exists.
func (o *RecommendationLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RecommendationLogExists(ctx, exec, o.ID)
}
