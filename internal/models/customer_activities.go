// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CustomerActivity is an object representing the database table.
type CustomerActivity struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CustomerID   string      `boil:"customer_id" json:"customer_id" toml:"customer_id" yaml:"customer_id"`
	ActivityType string      `boil:"activity_type" json:"activity_type" toml:"activity_type" yaml:"activity_type"`
	ProductID    null.String `boil:"product_id" json:"product_id,omitempty" toml:"product_id" yaml:"product_id,omitempty"`
	SearchQuery  null.String `boil:"search_query" json:"search_query,omitempty" toml:"search_query" yaml:"search_query,omitempty"`
	SessionID    null.String `boil:"session_id" json:"session_id,omitempty" toml:"session_id" yaml:"session_id,omitempty"`
	UserAgent    null.String `boil:"user_agent" json:"user_agent,omitempty" toml:"user_agent" yaml:"user_agent,omitempty"`
	IPAddress    null.String `boil:"ip_address" json:"ip_address,omitempty" toml:"ip_address" yaml:"ip_address,omitempty"`
	Metadata     null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	CreatedAt    null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *customerActivityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L customerActivityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CustomerActivityColumns = struct {
	ID           string
	CustomerID   string
	ActivityType string
	ProductID    string
	SearchQuery  string
	SessionID    string
	UserAgent    string
	IPAddress    string
	Metadata     string
	CreatedAt    string
}{
	ID:           "id",
	CustomerID:   "customer_id",
	ActivityType: "activity_type",
	ProductID:    "product_id",
	SearchQuery:  "search_query",
	SessionID:    "session_id",
	UserAgent:    "user_agent",
	IPAddress:    "ip_address",
	Metadata:     "metadata",
	CreatedAt:    "created_at",
}

var CustomerActivityTableColumns = struct {
	ID           string
	CustomerID   string
	ActivityType string
	ProductID    string
	SearchQuery  string
	SessionID    string
	UserAgent    string
	IPAddress    string
	Metadata     string
	CreatedAt    string
}{
	ID:           "customer_activities.id",
	CustomerID:   "customer_activities.customer_id",
	ActivityType: "customer_activities.activity_type",
	ProductID:    "customer_activities.product_id",
	SearchQuery:  "customer_activities.search_query",
	SessionID:    "customer_activities.session_id",
	UserAgent:    "customer_activities.user_agent",
	IPAddress:    "customer_activities.ip_address",
	Metadata:     "customer_activities.metadata",
	CreatedAt:    "customer_activities.created_at",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CustomerActivityWhere = struct {
	ID           whereHelperstring
	CustomerID   whereHelperstring
	ActivityType whereHelperstring
	ProductID    whereHelpernull_String
	SearchQuery  whereHelpernull_String
	SessionID    whereHelpernull_String
	UserAgent    whereHelpernull_String
	IPAddress    whereHelpernull_String
	Metadata     whereHelpernull_JSON
	CreatedAt    whereHelpernull_Time
}{
	ID:           whereHelperstring{field: "\"customer_activities\".\"id\""},
	CustomerID:   whereHelperstring{field: "\"customer_activities\".\"customer_id\""},
	ActivityType: whereHelperstring{field: "\"customer_activities\".\"activity_type\""},
	ProductID:    whereHelpernull_String{field: "\"customer_activities\".\"product_id\""},
	SearchQuery:  whereHelpernull_String{field: "\"customer_activities\".\"search_query\""},
	SessionID:    whereHelpernull_String{field: "\"customer_activities\".\"session_id\""},
	UserAgent:    whereHelpernull_String{field: "\"customer_activities\".\"user_agent\""},
	IPAddress:    whereHelpernull_String{field: "\"customer_activities\".\"ip_address\""},
	Metadata:     whereHelpernull_JSON{field: "\"customer_activities\".\"metadata\""},
	CreatedAt:    whereHelpernull_Time{field: "\"customer_activities\".\"created_at\""},
}

// CustomerActivityRels is where relationship names are stored.
var CustomerActivityRels = struct {
	Customer string
	Product  string
}{
	Customer: "Customer",
	Product:  "Product",
}

// customerActivityR is where relationships are stored.
type customerActivityR struct {
	Customer *Customer `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
	Product  *Product  `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*customerActivityR) NewStruct() *customerActivityR {
	return &customerActivityR{}
}

func (o *CustomerActivity) GetCustomer() *Customer {
	if o == nil {
		return nil
	}

	return o.R.GetCustomer()
}

func (r *customerActivityR) GetCustomer() *Customer {
	if r == nil {
		return nil
	}

	return r.Customer
}

func (o *CustomerActivity) GetProduct() *Product {
	if o == nil {
		return nil
	}

	return o.R.GetProduct()
}

func (r *customerActivityR) GetProduct() *Product {
	if r == nil {
		return nil
	}

	return r.Product
}

// customerActivityL is where Load methods for each relationship are stored.
type customerActivityL struct{}

var (
	customerActivityAllColumns            = []string{"id", "customer_id", "activity_type", "product_id", "search_query", "session_id", "user_agent", "ip_address", "metadata", "created_at"}
	customerActivityColumnsWithoutDefault = []string{"customer_id", "activity_type"}
	customerActivityColumnsWithDefault    = []string{"id", "product_id", "search_query", "session_id", "user_agent", "ip_address", "metadata", "created_at"}
	customerActivityPrimaryKeyColumns     = []string{"id"}
	customerActivityGeneratedColumns      = []string{}
)

type (
	// CustomerActivitySlice is an alias for a slice of pointers to CustomerActivity.
	// This should almost always be used instead of []CustomerActivity.
	CustomerActivitySlice []*CustomerActivity
	// CustomerActivityHook is the signature for custom CustomerActivity hook methods
	CustomerActivityHook func(context.Context, boil.ContextExecutor, *CustomerActivity) error

	customerActivityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customerActivityType                 = reflect.TypeOf(&CustomerActivity{})
	customerActivityMapping              = queries.MakeStructMapping(customerActivityType)
	customerActivityPrimaryKeyMapping, _ = queries.BindMapping(customerActivityType, customerActivityMapping, customerActivityPrimaryKeyColumns)
	customerActivityInsertCacheMut       sync.RWMutex
	customerActivityInsertCache          = make(map[string]insertCache)
	customerActivityUpdateCacheMut       sync.RWMutex
	customerActivityUpdateCache          = make(map[string]updateCache)
	customerActivityUpsertCacheMut       sync.RWMutex
	customerActivityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var customerActivityAfterSelectMu sync.Mutex
var customerActivityAfterSelectHooks []CustomerActivityHook

var customerActivityBeforeInsertMu sync.Mutex
var customerActivityBeforeInsertHooks []CustomerActivityHook
var customerActivityAfterInsertMu sync.Mutex
var customerActivityAfterInsertHooks []CustomerActivityHook

var customerActivityBeforeUpdateMu sync.Mutex
var customerActivityBeforeUpdateHooks []CustomerActivityHook
var customerActivityAfterUpdateMu sync.Mutex
var customerActivityAfterUpdateHooks []CustomerActivityHook

var customerActivityBeforeDeleteMu sync.Mutex
var customerActivityBeforeDeleteHooks []CustomerActivityHook
var customerActivityAfterDeleteMu sync.Mutex
var customerActivityAfterDeleteHooks []CustomerActivityHook

var customerActivityBeforeUpsertMu sync.Mutex
var customerActivityBeforeUpsertHooks []CustomerActivityHook
var customerActivityAfterUpsertMu sync.Mutex
var customerActivityAfterUpsertHooks []CustomerActivityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CustomerActivity) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerActivityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CustomerActivity) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerActivityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CustomerActivity) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerActivityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CustomerActivity) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerActivityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CustomerActivity) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerActivityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CustomerActivity) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerActivityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CustomerActivity) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerActivityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CustomerActivity) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerActivityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CustomerActivity) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerActivityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCustomerActivityHook registers your hook function for all future operations.
func AddCustomerActivityHook(hookPoint boil.HookPoint, customerActivityHook CustomerActivityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		customerActivityAfterSelectMu.Lock()
		customerActivityAfterSelectHooks = append(customerActivityAfterSelectHooks, customerActivityHook)
		customerActivityAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		customerActivityBeforeInsertMu.Lock()
		customerActivityBeforeInsertHooks = append(customerActivityBeforeInsertHooks, customerActivityHook)
		customerActivityBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		customerActivityAfterInsertMu.Lock()
		customerActivityAfterInsertHooks = append(customerActivityAfterInsertHooks, customerActivityHook)
		customerActivityAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		customerActivityBeforeUpdateMu.Lock()
		customerActivityBeforeUpdateHooks = append(customerActivityBeforeUpdateHooks, customerActivityHook)
		customerActivityBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		customerActivityAfterUpdateMu.Lock()
		customerActivityAfterUpdateHooks = append(customerActivityAfterUpdateHooks, customerActivityHook)
		customerActivityAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		customerActivityBeforeDeleteMu.Lock()
		customerActivityBeforeDeleteHooks = append(customerActivityBeforeDeleteHooks, customerActivityHook)
		customerActivityBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		customerActivityAfterDeleteMu.Lock()
		customerActivityAfterDeleteHooks = append(customerActivityAfterDeleteHooks, customerActivityHook)
		customerActivityAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		customerActivityBeforeUpsertMu.Lock()
		customerActivityBeforeUpsertHooks = append(customerActivityBeforeUpsertHooks, customerActivityHook)
		customerActivityBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		customerActivityAfterUpsertMu.Lock()
		customerActivityAfterUpsertHooks = append(customerActivityAfterUpsertHooks, customerActivityHook)
		customerActivityAfterUpsertMu.Unlock()
	}
}

// One returns a single customerActivity record from the query.
func (q customerActivityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CustomerActivity, error) {
	o := &CustomerActivity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for customer_activities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CustomerActivity records from the query.
func (q customerActivityQuery) All(ctx context.Context, exec boil.ContextExecutor) (CustomerActivitySlice, error) {
	var o []*CustomerActivity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CustomerActivity slice")
	}

	if len(customerActivityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CustomerActivity records in the query.
func (q customerActivityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count customer_activities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q customerActivityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if customer_activities exists")
	}

	return count > 0, nil
}

// Customer pointed to by the foreign key.
func (o *CustomerActivity) Customer(mods ...qm.QueryMod) customerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CustomerID),
	}

	queryMods = append(queryMods, mods...)

	return Customers(queryMods...)
}

// Product pointed to by the foreign key.
func (o *CustomerActivity) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadCustomer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (customerActivityL) LoadCustomer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCustomerActivity interface{}, mods queries.Applicator) error {
	var slice []*CustomerActivity
	var object *CustomerActivity

	if singular {
		var ok bool
		object, ok = maybeCustomerActivity.(*CustomerActivity)
		if !ok {
			object = new(CustomerActivity)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCustomerActivity)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCustomerActivity))
			}
		}
	} else {
		s, ok := maybeCustomerActivity.(*[]*CustomerActivity)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCustomerActivity)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCustomerActivity))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &customerActivityR{}
		}
		args[object.CustomerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerActivityR{}
			}

			args[obj.CustomerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`customers`),
		qm.WhereIn(`customers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Customer")
	}

	var resultSlice []*Customer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Customer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for customers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customers")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Customer = foreign
		if foreign.R == nil {
			foreign.R = &customerR{}
		}
		foreign.R.CustomerActivities = append(foreign.R.CustomerActivities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CustomerID == foreign.ID {
				local.R.Customer = foreign
				if foreign.R == nil {
					foreign.R = &customerR{}
				}
				foreign.R.CustomerActivities = append(foreign.R.CustomerActivities, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (customerActivityL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCustomerActivity interface{}, mods queries.Applicator) error {
	var slice []*CustomerActivity
	var object *CustomerActivity

	if singular {
		var ok bool
		object, ok = maybeCustomerActivity.(*CustomerActivity)
		if !ok {
			object = new(CustomerActivity)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCustomerActivity)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCustomerActivity))
			}
		}
	} else {
		s, ok := maybeCustomerActivity.(*[]*CustomerActivity)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCustomerActivity)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCustomerActivity))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &customerActivityR{}
		}
		if !queries.IsNil(object.ProductID) {
			args[object.ProductID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerActivityR{}
			}

			if !queries.IsNil(obj.ProductID) {
				args[obj.ProductID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.CustomerActivities = append(foreign.R.CustomerActivities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductID, foreign.ID) {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.CustomerActivities = append(foreign.R.CustomerActivities, local)
				break
			}
		}
	}

	return nil
}

// SetCustomer of the customerActivity to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.CustomerActivities.
func (o *CustomerActivity) SetCustomer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Customer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"customer_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"customer_id"}),
		strmangle.WhereClause("\"", "\"", 2, customerActivityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CustomerID = related.ID
	if o.R == nil {
		o.R = &customerActivityR{
			Customer: related,
		}
	} else {
		o.R.Customer = related
	}

	if related.R == nil {
		related.R = &customerR{
			CustomerActivities: CustomerActivitySlice{o},
		}
	} else {
		related.R.CustomerActivities = append(related.R.CustomerActivities, o)
	}

	return nil
}

// SetProduct of the customerActivity to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.CustomerActivities.
func (o *CustomerActivity) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"customer_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, customerActivityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductID, related.ID)
	if o.R == nil {
		o.R = &customerActivityR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			CustomerActivities: CustomerActivitySlice{o},
		}
	} else {
		related.R.CustomerActivities = append(related.R.CustomerActivities, o)
	}

	return nil
}

// RemoveProduct relationship.
// Sets o.R.Product to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CustomerActivity) RemoveProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.ProductID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Product = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CustomerActivities {
		if queries.Equal(o.ProductID, ri.ProductID) {
			continue
		}

		ln := len(related.R.CustomerActivities)
		if ln > 1 && i < ln-1 {
			related.R.CustomerActivities[i] = related.R.CustomerActivities[ln-1]
		}
		related.R.CustomerActivities = related.R.CustomerActivities[:ln-1]
		break
	}
	return nil
}

// CustomerActivities retrieves all the records using an executor.
func CustomerActivities(mods ...qm.QueryMod) customerActivityQuery {
	mods = append(mods, qm.From("\"customer_activities\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"customer_activities\".*"})
	}

	return customerActivityQuery{q}
}

// FindCustomerActivity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCustomerActivity(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CustomerActivity, error) {
	customerActivityObj := &CustomerActivity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"customer_activities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, customerActivityObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from customer_activities")
	}

	if err = customerActivityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return customerActivityObj, err
	}

	return customerActivityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CustomerActivity) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no customer_activities provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerActivityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	customerActivityInsertCacheMut.RLock()
	cache, cached := customerActivityInsertCache[key]
	customerActivityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			customerActivityAllColumns,
			customerActivityColumnsWithDefault,
			customerActivityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(customerActivityType, customerActivityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(customerActivityType, customerActivityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"customer_activities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"customer_activities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into customer_activities")
	}

	if !cached {
		customerActivityInsertCacheMut.Lock()
		customerActivityInsertCache[key] = cache
		customerActivityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CustomerActivity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CustomerActivity) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	customerActivityUpdateCacheMut.RLock()
	cache, cached := customerActivityUpdateCache[key]
	customerActivityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			customerActivityAllColumns,
			customerActivityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update customer_activities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"customer_activities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, customerActivityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(customerActivityType, customerActivityMapping, append(wl, customerActivityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update customer_activities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for customer_activities")
	}

	if !cached {
		customerActivityUpdateCacheMut.Lock()
		customerActivityUpdateCache[key] = cache
		customerActivityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q customerActivityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for customer_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for customer_activities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CustomerActivitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"customer_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, customerActivityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in customerActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all customerActivity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CustomerActivity) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no customer_activities provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerActivityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	customerActivityUpsertCacheMut.RLock()
	cache, cached := customerActivityUpsertCache[key]
	customerActivityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			customerActivityAllColumns,
			customerActivityColumnsWithDefault,
			customerActivityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			customerActivityAllColumns,
			customerActivityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert customer_activities, could not build update column list")
		}

		ret := strmangle.SetComplement(customerActivityAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(customerActivityPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert customer_activities, could not build conflict column list")
			}

			conflict = make([]string, len(customerActivityPrimaryKeyColumns))
			copy(conflict, customerActivityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"customer_activities\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(customerActivityType, customerActivityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(customerActivityType, customerActivityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert customer_activities")
	}

	if !cached {
		customerActivityUpsertCacheMut.Lock()
		customerActivityUpsertCache[key] = cache
		customerActivityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CustomerActivity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CustomerActivity) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CustomerActivity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), customerActivityPrimaryKeyMapping)
	sql := "DELETE FROM \"customer_activities\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from customer_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for customer_activities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q customerActivityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no customerActivityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customer_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for customer_activities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CustomerActivitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(customerActivityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"customer_activities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, customerActivityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customerActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for customer_activities")
	}

	if len(customerActivityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CustomerActivity) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCustomerActivity(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomerActivitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CustomerActivitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"customer_activities\".* FROM \"customer_activities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, customerActivityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CustomerActivitySlice")
	}

	*o = slice

	return nil
}

// CustomerActivityExists checks if the CustomerActivity row exists.
func CustomerActivityExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"customer_activities\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if customer_activities exists")
	}

	return exists, nil
}

// Exists checks if the CustomerActivity row exists.
func (o *CustomerActivity) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CustomerActivityExists(ctx, exec, o.ID)
}
