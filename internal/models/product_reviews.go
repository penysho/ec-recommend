// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductReview is an object representing the database table.
type ProductReview struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductID          string      `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	CustomerID         string      `boil:"customer_id" json:"customer_id" toml:"customer_id" yaml:"customer_id"`
	OrderID            null.String `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	Rating             int         `boil:"rating" json:"rating" toml:"rating" yaml:"rating"`
	Title              null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Content            null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	IsVerifiedPurchase null.Bool   `boil:"is_verified_purchase" json:"is_verified_purchase,omitempty" toml:"is_verified_purchase" yaml:"is_verified_purchase,omitempty"`
	HelpfulVotes       null.Int    `boil:"helpful_votes" json:"helpful_votes,omitempty" toml:"helpful_votes" yaml:"helpful_votes,omitempty"`
	TotalVotes         null.Int    `boil:"total_votes" json:"total_votes,omitempty" toml:"total_votes" yaml:"total_votes,omitempty"`
	CreatedAt          null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *productReviewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productReviewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductReviewColumns = struct {
	ID                 string
	ProductID          string
	CustomerID         string
	OrderID            string
	Rating             string
	Title              string
	Content            string
	IsVerifiedPurchase string
	HelpfulVotes       string
	TotalVotes         string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	ProductID:          "product_id",
	CustomerID:         "customer_id",
	OrderID:            "order_id",
	Rating:             "rating",
	Title:              "title",
	Content:            "content",
	IsVerifiedPurchase: "is_verified_purchase",
	HelpfulVotes:       "helpful_votes",
	TotalVotes:         "total_votes",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

var ProductReviewTableColumns = struct {
	ID                 string
	ProductID          string
	CustomerID         string
	OrderID            string
	Rating             string
	Title              string
	Content            string
	IsVerifiedPurchase string
	HelpfulVotes       string
	TotalVotes         string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "product_reviews.id",
	ProductID:          "product_reviews.product_id",
	CustomerID:         "product_reviews.customer_id",
	OrderID:            "product_reviews.order_id",
	Rating:             "product_reviews.rating",
	Title:              "product_reviews.title",
	Content:            "product_reviews.content",
	IsVerifiedPurchase: "product_reviews.is_verified_purchase",
	HelpfulVotes:       "product_reviews.helpful_votes",
	TotalVotes:         "product_reviews.total_votes",
	CreatedAt:          "product_reviews.created_at",
	UpdatedAt:          "product_reviews.updated_at",
}

// Generated where

var ProductReviewWhere = struct {
	ID                 whereHelperstring
	ProductID          whereHelperstring
	CustomerID         whereHelperstring
	OrderID            whereHelpernull_String
	Rating             whereHelperint
	Title              whereHelpernull_String
	Content            whereHelpernull_String
	IsVerifiedPurchase whereHelpernull_Bool
	HelpfulVotes       whereHelpernull_Int
	TotalVotes         whereHelpernull_Int
	CreatedAt          whereHelpernull_Time
	UpdatedAt          whereHelpernull_Time
}{
	ID:                 whereHelperstring{field: "\"product_reviews\".\"id\""},
	ProductID:          whereHelperstring{field: "\"product_reviews\".\"product_id\""},
	CustomerID:         whereHelperstring{field: "\"product_reviews\".\"customer_id\""},
	OrderID:            whereHelpernull_String{field: "\"product_reviews\".\"order_id\""},
	Rating:             whereHelperint{field: "\"product_reviews\".\"rating\""},
	Title:              whereHelpernull_String{field: "\"product_reviews\".\"title\""},
	Content:            whereHelpernull_String{field: "\"product_reviews\".\"content\""},
	IsVerifiedPurchase: whereHelpernull_Bool{field: "\"product_reviews\".\"is_verified_purchase\""},
	HelpfulVotes:       whereHelpernull_Int{field: "\"product_reviews\".\"helpful_votes\""},
	TotalVotes:         whereHelpernull_Int{field: "\"product_reviews\".\"total_votes\""},
	CreatedAt:          whereHelpernull_Time{field: "\"product_reviews\".\"created_at\""},
	UpdatedAt:          whereHelpernull_Time{field: "\"product_reviews\".\"updated_at\""},
}

// ProductReviewRels is where relationship names are stored.
var ProductReviewRels = struct {
	Customer string
	Order    string
	Product  string
}{
	Customer: "Customer",
	Order:    "Order",
	Product:  "Product",
}

// productReviewR is where relationships are stored.
type productReviewR struct {
	Customer *Customer `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
	Order    *Order    `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	Product  *Product  `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*productReviewR) NewStruct() *productReviewR {
	return &productReviewR{}
}

func (o *ProductReview) GetCustomer() *Customer {
	if o == nil {
		return nil
	}

	return o.R.GetCustomer()
}

func (r *productReviewR) GetCustomer() *Customer {
	if r == nil {
		return nil
	}

	return r.Customer
}

func (o *ProductReview) GetOrder() *Order {
	if o == nil {
		return nil
	}

	return o.R.GetOrder()
}

func (r *productReviewR) GetOrder() *Order {
	if r == nil {
		return nil
	}

	return r.Order
}

func (o *ProductReview) GetProduct() *Product {
	if o == nil {
		return nil
	}

	return o.R.GetProduct()
}

func (r *productReviewR) GetProduct() *Product {
	if r == nil {
		return nil
	}

	return r.Product
}

// productReviewL is where Load methods for each relationship are stored.
type productReviewL struct{}

var (
	productReviewAllColumns            = []string{"id", "product_id", "customer_id", "order_id", "rating", "title", "content", "is_verified_purchase", "helpful_votes", "total_votes", "created_at", "updated_at"}
	productReviewColumnsWithoutDefault = []string{"product_id", "customer_id", "rating"}
	productReviewColumnsWithDefault    = []string{"id", "order_id", "title", "content", "is_verified_purchase", "helpful_votes", "total_votes", "created_at", "updated_at"}
	productReviewPrimaryKeyColumns     = []string{"id"}
	productReviewGeneratedColumns      = []string{}
)

type (
	// ProductReviewSlice is an alias for a slice of pointers to ProductReview.
	// This should almost always be used instead of []ProductReview.
	ProductReviewSlice []*ProductReview
	// ProductReviewHook is the signature for custom ProductReview hook methods
	ProductReviewHook func(context.Context, boil.ContextExecutor, *ProductReview) error

	productReviewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productReviewType                 = reflect.TypeOf(&ProductReview{})
	productReviewMapping              = queries.MakeStructMapping(productReviewType)
	productReviewPrimaryKeyMapping, _ = queries.BindMapping(productReviewType, productReviewMapping, productReviewPrimaryKeyColumns)
	productReviewInsertCacheMut       sync.RWMutex
	productReviewInsertCache          = make(map[string]insertCache)
	productReviewUpdateCacheMut       sync.RWMutex
	productReviewUpdateCache          = make(map[string]updateCache)
	productReviewUpsertCacheMut       sync.RWMutex
	productReviewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productReviewAfterSelectMu sync.Mutex
var productReviewAfterSelectHooks []ProductReviewHook

var productReviewBeforeInsertMu sync.Mutex
var productReviewBeforeInsertHooks []ProductReviewHook
var productReviewAfterInsertMu sync.Mutex
var productReviewAfterInsertHooks []ProductReviewHook

var productReviewBeforeUpdateMu sync.Mutex
var productReviewBeforeUpdateHooks []ProductReviewHook
var productReviewAfterUpdateMu sync.Mutex
var productReviewAfterUpdateHooks []ProductReviewHook

var productReviewBeforeDeleteMu sync.Mutex
var productReviewBeforeDeleteHooks []ProductReviewHook
var productReviewAfterDeleteMu sync.Mutex
var productReviewAfterDeleteHooks []ProductReviewHook

var productReviewBeforeUpsertMu sync.Mutex
var productReviewBeforeUpsertHooks []ProductReviewHook
var productReviewAfterUpsertMu sync.Mutex
var productReviewAfterUpsertHooks []ProductReviewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductReview) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productReviewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductReview) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productReviewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductReview) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productReviewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductReview) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productReviewBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductReview) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productReviewAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductReview) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productReviewBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductReview) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productReviewAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductReview) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productReviewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductReview) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productReviewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductReviewHook registers your hook function for all future operations.
func AddProductReviewHook(hookPoint boil.HookPoint, productReviewHook ProductReviewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productReviewAfterSelectMu.Lock()
		productReviewAfterSelectHooks = append(productReviewAfterSelectHooks, productReviewHook)
		productReviewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productReviewBeforeInsertMu.Lock()
		productReviewBeforeInsertHooks = append(productReviewBeforeInsertHooks, productReviewHook)
		productReviewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productReviewAfterInsertMu.Lock()
		productReviewAfterInsertHooks = append(productReviewAfterInsertHooks, productReviewHook)
		productReviewAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productReviewBeforeUpdateMu.Lock()
		productReviewBeforeUpdateHooks = append(productReviewBeforeUpdateHooks, productReviewHook)
		productReviewBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productReviewAfterUpdateMu.Lock()
		productReviewAfterUpdateHooks = append(productReviewAfterUpdateHooks, productReviewHook)
		productReviewAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productReviewBeforeDeleteMu.Lock()
		productReviewBeforeDeleteHooks = append(productReviewBeforeDeleteHooks, productReviewHook)
		productReviewBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productReviewAfterDeleteMu.Lock()
		productReviewAfterDeleteHooks = append(productReviewAfterDeleteHooks, productReviewHook)
		productReviewAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productReviewBeforeUpsertMu.Lock()
		productReviewBeforeUpsertHooks = append(productReviewBeforeUpsertHooks, productReviewHook)
		productReviewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productReviewAfterUpsertMu.Lock()
		productReviewAfterUpsertHooks = append(productReviewAfterUpsertHooks, productReviewHook)
		productReviewAfterUpsertMu.Unlock()
	}
}

// One returns a single productReview record from the query.
func (q productReviewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductReview, error) {
	o := &ProductReview{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_reviews")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductReview records from the query.
func (q productReviewQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductReviewSlice, error) {
	var o []*ProductReview

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductReview slice")
	}

	if len(productReviewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductReview records in the query.
func (q productReviewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_reviews rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productReviewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_reviews exists")
	}

	return count > 0, nil
}

// Customer pointed to by the foreign key.
func (o *ProductReview) Customer(mods ...qm.QueryMod) customerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CustomerID),
	}

	queryMods = append(queryMods, mods...)

	return Customers(queryMods...)
}

// Order pointed to by the foreign key.
func (o *ProductReview) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// Product pointed to by the foreign key.
func (o *ProductReview) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadCustomer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productReviewL) LoadCustomer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductReview interface{}, mods queries.Applicator) error {
	var slice []*ProductReview
	var object *ProductReview

	if singular {
		var ok bool
		object, ok = maybeProductReview.(*ProductReview)
		if !ok {
			object = new(ProductReview)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductReview))
			}
		}
	} else {
		s, ok := maybeProductReview.(*[]*ProductReview)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductReview))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productReviewR{}
		}
		args[object.CustomerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productReviewR{}
			}

			args[obj.CustomerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`customers`),
		qm.WhereIn(`customers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Customer")
	}

	var resultSlice []*Customer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Customer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for customers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customers")
	}

	if len(customerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Customer = foreign
		if foreign.R == nil {
			foreign.R = &customerR{}
		}
		foreign.R.ProductReviews = append(foreign.R.ProductReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CustomerID == foreign.ID {
				local.R.Customer = foreign
				if foreign.R == nil {
					foreign.R = &customerR{}
				}
				foreign.R.ProductReviews = append(foreign.R.ProductReviews, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productReviewL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductReview interface{}, mods queries.Applicator) error {
	var slice []*ProductReview
	var object *ProductReview

	if singular {
		var ok bool
		object, ok = maybeProductReview.(*ProductReview)
		if !ok {
			object = new(ProductReview)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductReview))
			}
		}
	} else {
		s, ok := maybeProductReview.(*[]*ProductReview)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductReview))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productReviewR{}
		}
		if !queries.IsNil(object.OrderID) {
			args[object.OrderID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productReviewR{}
			}

			if !queries.IsNil(obj.OrderID) {
				args[obj.OrderID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.ProductReviews = append(foreign.R.ProductReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.ProductReviews = append(foreign.R.ProductReviews, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productReviewL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductReview interface{}, mods queries.Applicator) error {
	var slice []*ProductReview
	var object *ProductReview

	if singular {
		var ok bool
		object, ok = maybeProductReview.(*ProductReview)
		if !ok {
			object = new(ProductReview)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductReview))
			}
		}
	} else {
		s, ok := maybeProductReview.(*[]*ProductReview)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductReview))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productReviewR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productReviewR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductReviews = append(foreign.R.ProductReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductReviews = append(foreign.R.ProductReviews, local)
				break
			}
		}
	}

	return nil
}

// SetCustomer of the productReview to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.ProductReviews.
func (o *ProductReview) SetCustomer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Customer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"customer_id"}),
		strmangle.WhereClause("\"", "\"", 2, productReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CustomerID = related.ID
	if o.R == nil {
		o.R = &productReviewR{
			Customer: related,
		}
	} else {
		o.R.Customer = related
	}

	if related.R == nil {
		related.R = &customerR{
			ProductReviews: ProductReviewSlice{o},
		}
	} else {
		related.R.ProductReviews = append(related.R.ProductReviews, o)
	}

	return nil
}

// SetOrder of the productReview to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.ProductReviews.
func (o *ProductReview) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, productReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &productReviewR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			ProductReviews: ProductReviewSlice{o},
		}
	} else {
		related.R.ProductReviews = append(related.R.ProductReviews, o)
	}

	return nil
}

// RemoveOrder relationship.
// Sets o.R.Order to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductReview) RemoveOrder(ctx context.Context, exec boil.ContextExecutor, related *Order) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Order = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductReviews {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.ProductReviews)
		if ln > 1 && i < ln-1 {
			related.R.ProductReviews[i] = related.R.ProductReviews[ln-1]
		}
		related.R.ProductReviews = related.R.ProductReviews[:ln-1]
		break
	}
	return nil
}

// SetProduct of the productReview to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductReviews.
func (o *ProductReview) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &productReviewR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductReviews: ProductReviewSlice{o},
		}
	} else {
		related.R.ProductReviews = append(related.R.ProductReviews, o)
	}

	return nil
}

// ProductReviews retrieves all the records using an executor.
func ProductReviews(mods ...qm.QueryMod) productReviewQuery {
	mods = append(mods, qm.From("\"product_reviews\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_reviews\".*"})
	}

	return productReviewQuery{q}
}

// FindProductReview retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductReview(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ProductReview, error) {
	productReviewObj := &ProductReview{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_reviews\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productReviewObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_reviews")
	}

	if err = productReviewObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productReviewObj, err
	}

	return productReviewObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductReview) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_reviews provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productReviewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productReviewInsertCacheMut.RLock()
	cache, cached := productReviewInsertCache[key]
	productReviewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productReviewAllColumns,
			productReviewColumnsWithDefault,
			productReviewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productReviewType, productReviewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productReviewType, productReviewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_reviews\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_reviews\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_reviews")
	}

	if !cached {
		productReviewInsertCacheMut.Lock()
		productReviewInsertCache[key] = cache
		productReviewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductReview.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductReview) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productReviewUpdateCacheMut.RLock()
	cache, cached := productReviewUpdateCache[key]
	productReviewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productReviewAllColumns,
			productReviewPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_reviews, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_reviews\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productReviewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productReviewType, productReviewMapping, append(wl, productReviewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_reviews row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_reviews")
	}

	if !cached {
		productReviewUpdateCacheMut.Lock()
		productReviewUpdateCache[key] = cache
		productReviewUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productReviewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_reviews")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductReviewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productReviewPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productReview")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductReview) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no product_reviews provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productReviewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productReviewUpsertCacheMut.RLock()
	cache, cached := productReviewUpsertCache[key]
	productReviewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productReviewAllColumns,
			productReviewColumnsWithDefault,
			productReviewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productReviewAllColumns,
			productReviewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_reviews, could not build update column list")
		}

		ret := strmangle.SetComplement(productReviewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(productReviewPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert product_reviews, could not build conflict column list")
			}

			conflict = make([]string, len(productReviewPrimaryKeyColumns))
			copy(conflict, productReviewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_reviews\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(productReviewType, productReviewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productReviewType, productReviewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_reviews")
	}

	if !cached {
		productReviewUpsertCacheMut.Lock()
		productReviewUpsertCache[key] = cache
		productReviewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductReview record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductReview) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductReview provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productReviewPrimaryKeyMapping)
	sql := "DELETE FROM \"product_reviews\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_reviews")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productReviewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productReviewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_reviews")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductReviewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productReviewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_reviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productReviewPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_reviews")
	}

	if len(productReviewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductReview) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductReview(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductReviewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductReviewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_reviews\".* FROM \"product_reviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productReviewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductReviewSlice")
	}

	*o = slice

	return nil
}

// ProductReviewExists checks if the ProductReview row exists.
func ProductReviewExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_reviews\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_reviews exists")
	}

	return exists, nil
}

// Exists checks if the ProductReview row exists.
func (o *ProductReview) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductReviewExists(ctx, exec, o.ID)
}
