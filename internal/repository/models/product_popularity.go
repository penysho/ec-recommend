// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ProductPopularity is an object representing the database table.
type ProductPopularity struct {
	ID          null.String       `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Name        null.String       `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	CategoryID  null.Int          `boil:"category_id" json:"category_id,omitempty" toml:"category_id" yaml:"category_id,omitempty"`
	Price       types.NullDecimal `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	OrderCount  null.Int64        `boil:"order_count" json:"order_count,omitempty" toml:"order_count" yaml:"order_count,omitempty"`
	TotalSold   null.Int64        `boil:"total_sold" json:"total_sold,omitempty" toml:"total_sold" yaml:"total_sold,omitempty"`
	AvgRating   types.NullDecimal `boil:"avg_rating" json:"avg_rating,omitempty" toml:"avg_rating" yaml:"avg_rating,omitempty"`
	ReviewCount null.Int64        `boil:"review_count" json:"review_count,omitempty" toml:"review_count" yaml:"review_count,omitempty"`
	ViewCount   null.Int64        `boil:"view_count" json:"view_count,omitempty" toml:"view_count" yaml:"view_count,omitempty"`
}

var ProductPopularityColumns = struct {
	ID          string
	Name        string
	CategoryID  string
	Price       string
	OrderCount  string
	TotalSold   string
	AvgRating   string
	ReviewCount string
	ViewCount   string
}{
	ID:          "id",
	Name:        "name",
	CategoryID:  "category_id",
	Price:       "price",
	OrderCount:  "order_count",
	TotalSold:   "total_sold",
	AvgRating:   "avg_rating",
	ReviewCount: "review_count",
	ViewCount:   "view_count",
}

var ProductPopularityTableColumns = struct {
	ID          string
	Name        string
	CategoryID  string
	Price       string
	OrderCount  string
	TotalSold   string
	AvgRating   string
	ReviewCount string
	ViewCount   string
}{
	ID:          "product_popularity.id",
	Name:        "product_popularity.name",
	CategoryID:  "product_popularity.category_id",
	Price:       "product_popularity.price",
	OrderCount:  "product_popularity.order_count",
	TotalSold:   "product_popularity.total_sold",
	AvgRating:   "product_popularity.avg_rating",
	ReviewCount: "product_popularity.review_count",
	ViewCount:   "product_popularity.view_count",
}

// Generated where

var ProductPopularityWhere = struct {
	ID          whereHelpernull_String
	Name        whereHelpernull_String
	CategoryID  whereHelpernull_Int
	Price       whereHelpertypes_NullDecimal
	OrderCount  whereHelpernull_Int64
	TotalSold   whereHelpernull_Int64
	AvgRating   whereHelpertypes_NullDecimal
	ReviewCount whereHelpernull_Int64
	ViewCount   whereHelpernull_Int64
}{
	ID:          whereHelpernull_String{field: "\"product_popularity\".\"id\""},
	Name:        whereHelpernull_String{field: "\"product_popularity\".\"name\""},
	CategoryID:  whereHelpernull_Int{field: "\"product_popularity\".\"category_id\""},
	Price:       whereHelpertypes_NullDecimal{field: "\"product_popularity\".\"price\""},
	OrderCount:  whereHelpernull_Int64{field: "\"product_popularity\".\"order_count\""},
	TotalSold:   whereHelpernull_Int64{field: "\"product_popularity\".\"total_sold\""},
	AvgRating:   whereHelpertypes_NullDecimal{field: "\"product_popularity\".\"avg_rating\""},
	ReviewCount: whereHelpernull_Int64{field: "\"product_popularity\".\"review_count\""},
	ViewCount:   whereHelpernull_Int64{field: "\"product_popularity\".\"view_count\""},
}

var (
	productPopularityAllColumns            = []string{"id", "name", "category_id", "price", "order_count", "total_sold", "avg_rating", "review_count", "view_count"}
	productPopularityColumnsWithoutDefault = []string{}
	productPopularityColumnsWithDefault    = []string{"id", "name", "category_id", "price", "order_count", "total_sold", "avg_rating", "review_count", "view_count"}
	productPopularityPrimaryKeyColumns     = []string{}
	productPopularityGeneratedColumns      = []string{}
)

type (
	// ProductPopularitySlice is an alias for a slice of pointers to ProductPopularity.
	// This should almost always be used instead of []ProductPopularity.
	ProductPopularitySlice []*ProductPopularity
	// ProductPopularityHook is the signature for custom ProductPopularity hook methods
	ProductPopularityHook func(context.Context, boil.ContextExecutor, *ProductPopularity) error

	productPopularityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productPopularityType           = reflect.TypeOf(&ProductPopularity{})
	productPopularityMapping        = queries.MakeStructMapping(productPopularityType)
	productPopularityInsertCacheMut sync.RWMutex
	productPopularityInsertCache    = make(map[string]insertCache)
	productPopularityUpdateCacheMut sync.RWMutex
	productPopularityUpdateCache    = make(map[string]updateCache)
	productPopularityUpsertCacheMut sync.RWMutex
	productPopularityUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var productPopularityAfterSelectMu sync.Mutex
var productPopularityAfterSelectHooks []ProductPopularityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductPopularity) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPopularityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductPopularityHook registers your hook function for all future operations.
func AddProductPopularityHook(hookPoint boil.HookPoint, productPopularityHook ProductPopularityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productPopularityAfterSelectMu.Lock()
		productPopularityAfterSelectHooks = append(productPopularityAfterSelectHooks, productPopularityHook)
		productPopularityAfterSelectMu.Unlock()
	}
}

// One returns a single productPopularity record from the query.
func (q productPopularityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductPopularity, error) {
	o := &ProductPopularity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_popularity")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductPopularity records from the query.
func (q productPopularityQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductPopularitySlice, error) {
	var o []*ProductPopularity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductPopularity slice")
	}

	if len(productPopularityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductPopularity records in the query.
func (q productPopularityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_popularity rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productPopularityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_popularity exists")
	}

	return count > 0, nil
}

// ProductPopularities retrieves all the records using an executor.
func ProductPopularities(mods ...qm.QueryMod) productPopularityQuery {
	mods = append(mods, qm.From("\"product_popularity\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_popularity\".*"})
	}

	return productPopularityQuery{q}
}
