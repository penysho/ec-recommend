// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CustomerPurchaseSummary is an object representing the database table.
type CustomerPurchaseSummary struct {
	CustomerID           null.String       `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	Email                null.String       `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	TotalOrders          null.Int64        `boil:"total_orders" json:"total_orders,omitempty" toml:"total_orders" yaml:"total_orders,omitempty"`
	TotalSpent           types.NullDecimal `boil:"total_spent" json:"total_spent,omitempty" toml:"total_spent" yaml:"total_spent,omitempty"`
	AvgOrderValue        types.NullDecimal `boil:"avg_order_value" json:"avg_order_value,omitempty" toml:"avg_order_value" yaml:"avg_order_value,omitempty"`
	UniqueProductsBought null.Int64        `boil:"unique_products_bought" json:"unique_products_bought,omitempty" toml:"unique_products_bought" yaml:"unique_products_bought,omitempty"`
	PurchasedCategories  types.Int64Array  `boil:"purchased_categories" json:"purchased_categories,omitempty" toml:"purchased_categories" yaml:"purchased_categories,omitempty"`
	LastOrderDate        null.Time         `boil:"last_order_date" json:"last_order_date,omitempty" toml:"last_order_date" yaml:"last_order_date,omitempty"`
}

var CustomerPurchaseSummaryColumns = struct {
	CustomerID           string
	Email                string
	TotalOrders          string
	TotalSpent           string
	AvgOrderValue        string
	UniqueProductsBought string
	PurchasedCategories  string
	LastOrderDate        string
}{
	CustomerID:           "customer_id",
	Email:                "email",
	TotalOrders:          "total_orders",
	TotalSpent:           "total_spent",
	AvgOrderValue:        "avg_order_value",
	UniqueProductsBought: "unique_products_bought",
	PurchasedCategories:  "purchased_categories",
	LastOrderDate:        "last_order_date",
}

var CustomerPurchaseSummaryTableColumns = struct {
	CustomerID           string
	Email                string
	TotalOrders          string
	TotalSpent           string
	AvgOrderValue        string
	UniqueProductsBought string
	PurchasedCategories  string
	LastOrderDate        string
}{
	CustomerID:           "customer_purchase_summary.customer_id",
	Email:                "customer_purchase_summary.email",
	TotalOrders:          "customer_purchase_summary.total_orders",
	TotalSpent:           "customer_purchase_summary.total_spent",
	AvgOrderValue:        "customer_purchase_summary.avg_order_value",
	UniqueProductsBought: "customer_purchase_summary.unique_products_bought",
	PurchasedCategories:  "customer_purchase_summary.purchased_categories",
	LastOrderDate:        "customer_purchase_summary.last_order_date",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CustomerPurchaseSummaryWhere = struct {
	CustomerID           whereHelpernull_String
	Email                whereHelpernull_String
	TotalOrders          whereHelpernull_Int64
	TotalSpent           whereHelpertypes_NullDecimal
	AvgOrderValue        whereHelpertypes_NullDecimal
	UniqueProductsBought whereHelpernull_Int64
	PurchasedCategories  whereHelpertypes_Int64Array
	LastOrderDate        whereHelpernull_Time
}{
	CustomerID:           whereHelpernull_String{field: "\"customer_purchase_summary\".\"customer_id\""},
	Email:                whereHelpernull_String{field: "\"customer_purchase_summary\".\"email\""},
	TotalOrders:          whereHelpernull_Int64{field: "\"customer_purchase_summary\".\"total_orders\""},
	TotalSpent:           whereHelpertypes_NullDecimal{field: "\"customer_purchase_summary\".\"total_spent\""},
	AvgOrderValue:        whereHelpertypes_NullDecimal{field: "\"customer_purchase_summary\".\"avg_order_value\""},
	UniqueProductsBought: whereHelpernull_Int64{field: "\"customer_purchase_summary\".\"unique_products_bought\""},
	PurchasedCategories:  whereHelpertypes_Int64Array{field: "\"customer_purchase_summary\".\"purchased_categories\""},
	LastOrderDate:        whereHelpernull_Time{field: "\"customer_purchase_summary\".\"last_order_date\""},
}

var (
	customerPurchaseSummaryAllColumns            = []string{"customer_id", "email", "total_orders", "total_spent", "avg_order_value", "unique_products_bought", "purchased_categories", "last_order_date"}
	customerPurchaseSummaryColumnsWithoutDefault = []string{}
	customerPurchaseSummaryColumnsWithDefault    = []string{"customer_id", "email", "total_orders", "total_spent", "avg_order_value", "unique_products_bought", "purchased_categories", "last_order_date"}
	customerPurchaseSummaryPrimaryKeyColumns     = []string{}
	customerPurchaseSummaryGeneratedColumns      = []string{}
)

type (
	// CustomerPurchaseSummarySlice is an alias for a slice of pointers to CustomerPurchaseSummary.
	// This should almost always be used instead of []CustomerPurchaseSummary.
	CustomerPurchaseSummarySlice []*CustomerPurchaseSummary
	// CustomerPurchaseSummaryHook is the signature for custom CustomerPurchaseSummary hook methods
	CustomerPurchaseSummaryHook func(context.Context, boil.ContextExecutor, *CustomerPurchaseSummary) error

	customerPurchaseSummaryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customerPurchaseSummaryType           = reflect.TypeOf(&CustomerPurchaseSummary{})
	customerPurchaseSummaryMapping        = queries.MakeStructMapping(customerPurchaseSummaryType)
	customerPurchaseSummaryInsertCacheMut sync.RWMutex
	customerPurchaseSummaryInsertCache    = make(map[string]insertCache)
	customerPurchaseSummaryUpdateCacheMut sync.RWMutex
	customerPurchaseSummaryUpdateCache    = make(map[string]updateCache)
	customerPurchaseSummaryUpsertCacheMut sync.RWMutex
	customerPurchaseSummaryUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var customerPurchaseSummaryAfterSelectMu sync.Mutex
var customerPurchaseSummaryAfterSelectHooks []CustomerPurchaseSummaryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CustomerPurchaseSummary) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerPurchaseSummaryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCustomerPurchaseSummaryHook registers your hook function for all future operations.
func AddCustomerPurchaseSummaryHook(hookPoint boil.HookPoint, customerPurchaseSummaryHook CustomerPurchaseSummaryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		customerPurchaseSummaryAfterSelectMu.Lock()
		customerPurchaseSummaryAfterSelectHooks = append(customerPurchaseSummaryAfterSelectHooks, customerPurchaseSummaryHook)
		customerPurchaseSummaryAfterSelectMu.Unlock()
	}
}

// One returns a single customerPurchaseSummary record from the query.
func (q customerPurchaseSummaryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CustomerPurchaseSummary, error) {
	o := &CustomerPurchaseSummary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for customer_purchase_summary")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CustomerPurchaseSummary records from the query.
func (q customerPurchaseSummaryQuery) All(ctx context.Context, exec boil.ContextExecutor) (CustomerPurchaseSummarySlice, error) {
	var o []*CustomerPurchaseSummary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CustomerPurchaseSummary slice")
	}

	if len(customerPurchaseSummaryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CustomerPurchaseSummary records in the query.
func (q customerPurchaseSummaryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count customer_purchase_summary rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q customerPurchaseSummaryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if customer_purchase_summary exists")
	}

	return count > 0, nil
}

// CustomerPurchaseSummaries retrieves all the records using an executor.
func CustomerPurchaseSummaries(mods ...qm.QueryMod) customerPurchaseSummaryQuery {
	mods = append(mods, qm.From("\"customer_purchase_summary\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"customer_purchase_summary\".*"})
	}

	return customerPurchaseSummaryQuery{q}
}
